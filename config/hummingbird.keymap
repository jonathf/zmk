// Copyright (c) 2023 The ZMK Contributors
// SPDX-License-Identifier: MiT
//
//       Q   Å              ins del
//      esc tab             cr  bs
//       Z                   Æ   Ø
//     W   E   R   T   Y   U   I   O
// A   S   D   F   G   H   J   K   L   P
// X   C   V   B           N   M   .:  /\
//
//
//       !
//     @   {   }   =   +   7   8   9
// *   "   (   )   $   -   4   5   6   0
// ,   ^   [   ]           1   2   3   _
//
//
//       |
//     §   «   »   ?   ho  pd  pu  en
// #   '   <   >   &   le  do  up  ri
// ;   ~   `   ´                       %

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

#define HOST_OS 2

#include "keymap/hummingbird.h"
#include "keymap/helper.h"
#include "keymap/qwerty.h"
#include "keymap/1234.h"
#include "keymap/navigate.h"
#include "keymap/function.h"
#include "keymap/thumbs.h"

ZMK_COMBO(_Q_0,   _Q,         _UL3 _UL4, 0 1 2)
// ZMK_COMBO(_Q_1,   _0_EXCL,    _UL3 _UL4, 1)
// ZMK_COMBO(_Q_2,   _0_PIPE,    _UL3 _UL4, 2)
ZMK_COMBO(_Q_4,   _Q,         _UL3 _UL4, 5 6 7)
// ZMK_COMBO(_Q_5,   _1_EXCL,    _UL3 _UL4, 5)
// ZMK_COMBO(_Q_6,   _1_PIPE,    _UL3 _UL4, 6)

ZMK_COMBO(_Z_0,   &kp Z,      _LL3 _LL4, 0 1 2)
// ZMK_COMBO(_Z_5,   &kp PRCNT,  _LL3 _LL4, 1)
ZMK_COMBO(_Z_4,   &kp Z,      _LL3 _LL4, 5 6 7)
// ZMK_COMBO(_Z_1,   &kp LS(N5), _LL3 _LL4, 5)

ZMK_COMBO(_TTT1,  &ttt,       _UL2 _UL3, 0 1 2 4 5 6 7)
ZMK_COMBO(_AAA3,  _0_AA,      _LL2 _LL3, 0 1 2)
ZMK_COMBO(_AAA2,  _1_AA,      _LL2 _LL3, 5 6 7)
ZMK_COMBO(_AE0,   _0_AE,      _LR2 _LR3, 0 1 2)
ZMK_COMBO(_AE1,   _1_AE,      _LR2 _LR3, 5 6 7)
ZMK_COMBO(_OE0,   _0_OE,      _LR3 _LR4, 0 1 2)
ZMK_COMBO(_OE1,   _1_OE,      _LR3 _LR4, 5 6 7)

ZMK_COMBO(_ESC,   &kp ESC,    _ML3 _ML4, 0 1 2 3 4 5 6 7)
ZMK_COMBO(_TAB,   &kp TAB,    _ML2 _ML3, 0 1 2 3 4 5 6 7)

ZMK_COMBO(_BKSP1,  &kp BKSP,  _MR3 _MR4, 0 1 2 3 4 5 6 7)
ZMK_COMBO(_BKSP2,  &bksp4,    _MR4 _UR5, 0 1 2 3 4 5 6 7)
ZMK_COMBO(_DEL,   &kp DEL,    _UR3 _UR4, 0 1 2 3 4 5 6 7)
ZMK_COMBO(_INS,   &kp INS,    _UR2 _UR3, 0 1 2 3 4 5 6 7)
ZMK_COMBO(_ENTER1, &kp ENTER, _MR2 _MR3, 0 1 2 3 4 5 6 7)
ZMK_COMBO(_ENTER2, &kp ENTER, _UR1 _UR2, 0 1 2 3 4 5 6 7)

ZMK_COMBO(_GUI,   &kp LGUI,   _MR1 _ML1, 0 1 2 3 4 5 6 7)
ZMK_COMBO(_SHIFT, &kp LSHIFT, _LR2 _LL2, 0 1 2 3 4 5 6 7)
ZMK_COMBO(_CTRL,  &kp LCTRL,  _LR3 _LL3, 0 1 2 3 4 5 6 7)
ZMK_COMBO(_ALT1,  &kp LALT,   _LR4 _LL4, 0 1 2 3 4 5 6 7)
ZMK_COMBO(_ALT2,  &kp RALT,   _MR5 _ML5, 0 1 2 3 4 5 6 7)

/ {
    macros {
      bksp4: bksp4 {
        compatible = "zmk,behavior-macro";
        label = "BKSP4";
        #binding-cells = <0>;
        bindings = <&macro_tap &kp BKSP &kp BKSP &kp BKSP &kp BKSP>;
      };
      ttt: ttt {
        compatible = "zmk,behavior-macro";
        label = "TTT";
        #binding-cells = <0>;
        bindings = <&macro_tap &kp TAB &kp TAB &kp TAB &kp TAB>;
      };
    };
    behaviors {
        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <
              _UR1 _UR2 _UR3 _UR4 _UR5
              _MR1 _MR2 _MR3 _MR4 _MR5
                   _LR2 _LR3 _LR4
            >;
            hold-trigger-on-release;
        };
        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <
              _UL1 _UL2 _UL3 _UL4 _UL5
              _ML1 _ML2 _ML3 _ML4 _ML5
                   _LL2 _LL3 _LL4
            >;
            hold-trigger-on-release;
        };
    };
};

ZMK_LAYER(BASE,
//  ╭────────┬────────┬────────┬────────┬────────╮ ╭────────┬────────┬────────┬────────┬────────╮
      _A       _W       _E       _R       _T         _Y       _U       _I       _O       _P
      _X       _S       _D       _F       _G         _H       _J       _K       _L       _0_FSLH
               _C       _V       _B                           _N       _M       _0_DOT
//           ╰────────┴────────┼────────┼────────┤ ├────────┼────────┼────────┴────────╯
                                 _0_CAPS  _SPACE     _1_2NUM  _1_2NAV
)

ZMK_LAYER(NUMERIC,
//  ╭────────┬────────┬────────┬────────┬────────╮ ╭────────┬────────┬────────┬────────┬────────╮
      _0_STAR  _0_AT    _0_LBRC  _0_RBRC  _0_EQUAL   _0_PLUS  _N7      _N8      _N9     _N0
      _0_COMMA _0_DQT   _0_LPAR  _0_RPAR  _0_DOLLAR  _0_MINUS _N4      _N5      _N6     _0_UNDER
               _0_CARET _0_LBKT  _0_RBKT                      _N1      _N2      _N3
//           ╰────────┴────────┼────────┼────────┤ ├────────┼────────┼────────┴────────╯
                                 _        _SPACE     _        _
)

ZMK_LAYER(NAVIGATION,
//  ╭────────┬────────┬────────┬────────┬────────╮ ╭────────┬────────┬────────┬────────┬────────╮
      _0_HASH  _0_PARA  _0_LDANG _0_RDANG _0_QMARK   _HOME    _PG_DN   _PG_UP   _END     _PSCRN
      _0_SEMI  _0_SQT   _0_LT    _0_GT    _0_AMPS    _LEFT    _DOWN    _UP      _RIGHT   _0_PRCNT
               _0_TILDE _0_GRAVE _0_ACUTE                   &kp LSHIFT _0_EXCL  _0_PIPE
//           ╰────────┴────────┼────────┼────────┤ ├────────┼────────┼────────┴────────╯
                                 _0_2ROOT _SPACE     _        _
)

ZMK_LAYER(MOUSE,
//  ╭────────┬────────┬────────┬────────┬────────╮ ╭────────┬────────┬────────┬────────┬────────╮
      _        _BRIMIN  _BRIDN   _BRIUP   _BRIMAX    &msc SCRL_LEFT &msc SCRL_DOWN &msc SCRL_UP &msc SCRL_RIGHT _
      _BTCLR   _VOLMUTE _VOLDN   _VOLUP   _VOLMAX    &mmv MOVE_LEFT &mmv MOVE_DOWN &mmv MOVE_UP &mmv MOVE_RIGHT _
               _BT0     _BT1     _BT2                &mkp LCLK      &mkp MCLK    &mkp RCLK
//           ╰────────┴────────┼────────┼────────┤ ├────────┼────────┼────────┴────────╯
                                 _        _SPACE     _        _2FUNC
)

ZMK_LAYER(FUNCTION,
//  ╭────────┬────────┬────────┬────────┬────────╮ ╭────────┬────────┬────────┬────────┬────────╮
      _        _        _        _        _          _F12     _F7      _F8      _F9      _F10
      _BTCLR   _        _        _        _          _F13     _F4      _F5      _F6      _F11
               _BT0     _BT1     _BT2
//           ╰────────┴────────┼────────┼────────┤ ├────────┼────────┼────────┴────────╯
                                 _        _SPACE     _        _
)

ZMK_LAYER(ALT-BASE,
//  ╭────────┬────────┬────────┬────────┬────────╮ ╭────────┬────────┬────────┬────────┬────────╮
      _A       _W       _E       _R       _T         _Y       _U       _I       _O       _P
      _X       _S       _D       _F       _G         _H       _J       _K       _L       _1_FSLH
               _C       _V       _B                           _N       _M       _1_DOT
//           ╰────────┴────────┼────────┼────────┤ ├────────┼────────┼────────┴────────╯
                                 _1_CAPS  _SPACE     _0_2NUM  _0_2NAV
)

ZMK_LAYER(ALT-NUMERIC,
//  ╭────────┬────────┬────────┬────────┬────────╮ ╭────────┬────────┬────────┬────────┬────────╮
      _1_STAR  _1_AT    _1_LBRC  _1_RBRC  _1_EQUAL   _1_PLUS  _N7      _N8      _N9     _N0
      _1_COMMA _1_DQT   _1_LPAR  _1_RPAR  _1_DOLLAR  _1_MINUS _N4      _N5      _N6     _1_UNDER
               _1_CARET _1_LBKT  _1_RBKT                      _N1      _N2      _N3
//           ╰────────┴────────┼────────┼────────┤ ├────────┼────────┼────────┴────────╯
                                 _        _SPACE     _        _
)

ZMK_LAYER(ALT-NAVIGATIO,
//  ╭────────┬────────┬────────┬────────┬────────╮ ╭────────┬────────┬────────┬────────┬────────╮
      _1_HASH  _1_PARA  _1_LDANG _1_RDANG _1_QMARK   _HOME    _PG_DN   _PG_UP   _END     _PSCRN
      _1_SEMI  _1_SQT   _1_LT    _1_GT    _1_AMPS    _LEFT    _DOWN    _UP      _RIGHT   _1_PRCNT
               _1_TILDE _1_GRAVE _1_ACUTE                   &kp LSHIFT _1_EXCL  _1_PIPE
//           ╰────────┴────────┼────────┼────────┤ ├────────┼────────┼────────┴────────╯
                                 _1_2ROOT _SPACE     _        _
)
